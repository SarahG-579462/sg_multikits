ACTION_DEFINE_ASSOCIATIVE_ARRAY 2DALIST// ASSOCIATIONS: column-label, is_transposed, mergetype, expected_columns
BEGIN //prompt, one two, loosen, restrict, sum, random, SMART, SKIP
  ~clastext~    => "0,0,0, 9,10"//class strings
  ~kitlist~     => "1,0,0,10"//kit   strings
  ~kittable~    => "0,0,0, 0"//kit races
  ~clasweap~    => "0,0,9, 9"//(old) weapon proficiencies
  ~weapprof~    => "1,1,9, 0"//weapon proficiencies
  ~abclsmod~    => "0,0,3, 7"//kit roll modifiers
  ~abclasrq~    => "0,0,3, 7"//kit roll requirements
  ~alignmnt~    => "0,0,4,10"//kit alignments
  ~backstab~    => "0,0,3, 0"//kit backstab
  ~sneakatt~    => "0,0,3, 0"//kit sneak attack     (3e)
  ~crippstr~    => "0,0,3, 0"//kit crippling strike (3e)
  ~thiefskl~    => "0,0,5, 0"//kit thief skills available
  ~thiefscl~    => "0,1,3, 0"//kit thief skills per level (COLUMN-WISE)
  ~clsrcreq~    => "0,0,4, 0"//kit racial requirements
  ~clascolr~    => "0,1,6, 0"//kit colours (COLUMN-WISE)
  ~clasiskl~    => "0,1,5, 0"//kit starting scores (COLUMN-WISE)
  ~clasthac~    => "0,1,5, 0"//kit thaco bonus (COLUMN-WISE)
  ~clswpbon~    => "0,0,8, 4"//kit weapon bonuses (APR, UNARMED APR, UNPROFICIENT THAC0)
END
DEFINE_ACTION_FUNCTION backup_2da
BEGIN
  ACTION_PHP_EACH "2DALIST" AS "2DA" => "OPTIONS" BEGIN
    COPY_EXISTING "%2DA%.2da" ~override~
      PATCH_PRINT "BACKED UP %2DA%.2DA"
  END
END

DEFINE_PATCH_FUNCTION read_2da_header_now
  RET ncols
  RET_ARRAY
    output
BEGIN
  SET numlines = 0
  SET curroffset = 0
  SPRINT currline ""
  WHILE (numlines < 3) BEGIN
  
    READ_BYTE  curroffset currbyte
    READ_ASCII curroffset currstr ( 1 )
    SET curroffset += 1
    PATCH_IF (currbyte == 0x0a) BEGIN
      SET numlines += 1
      SPRINT newline "%currline%"
      SPRINT currline ""
    END ELSE BEGIN
      PATCH_IF (currbyte != 0x0d) BEGIN
      SPRINTF currline EVAL "%currline%%s" ("%currstr%")
      END
    END
  END
  // send to an ass-array
  PATCH_DEFINE_ASSOCIATIVE_ARRAY output BEGIN END
  SPRINT currword ""
  ncols = 0
  WHILE (STRING_LENGTH "%newline%" > 0) BEGIN
    ncols += 1
    INNER_PATCH_SAVE "currword" "%newline%" BEGIN
      // REMOVE LEADING SPACES:
      PATCH_IF NOT ("%newline%" STRING_CONTAINS_REGEXP "^ *") BEGIN
        REPLACE_TEXTUALLY "^ *" ""
      END
      // REMOVE ANY TRAILING SPACES AND ANYTHING FOLLOWING
      PATCH_IF NOT ("%newline%" STRING_CONTAINS_REGEXP " +.*$") BEGIN
        REPLACE_TEXTUALLY " +.*$" ""
      END
    END
    INNER_PATCH_SAVE newline "%newline%" BEGIN
      REPLACE_TEXTUALLY "^ *[^ ]+ *" ""
    END
    PATCH_IF (STRING_LENGTH "%currword%") > 0 BEGIN
      SET $output("%currword%") = "%ncols%"
    END
  END
  
END


DEFINE_ACTION_FUNCTION 2da_to_asarray
  INT_VAR name_col = 0
          ncols = 0
  STR_VAR filename = ~~
          fileto = ~override~
  RET_ARRAY
    rows
    cols
    outtable2
    nrows
    ncols
  BEGIN
    ACTION_DEFINE_ASSOCIATIVE_ARRAY "rows" BEGIN END
    ACTION_DEFINE_ASSOCIATIVE_ARRAY "cols" BEGIN END
    ACTION_DEFINE_ARRAY "outtable2" BEGIN END
    COPY_EXISTING "%filename%" "%fileto%"
      PATCH_IF ncols == 0 BEGIN
        COUNT_2DA_COLS ncols
      END ELSE BEGIN
        COUNT_2DA_COLS ncolsreal
        PATCH_IF ncolsreal != ncols BEGIN
          PATCH_WARN ~%filename%: number of columns, %ncolsreal% does not match expected number of columns, %ncols%.~
        END
        PATCH_IF ncolsreal < ncols BEGIN
          ncols = ncolsreal 
        END
      END
      
      LPF read_2da_header_now RET ncolscheck = ncols RET_ARRAY "cols" = output  END
      
      
      READ_2DA_ENTRIES_NOW "outtable" "%ncols%"
      SET nrows = "%outtable%"
      // dumb but weidu is weidu I guess
      FOR (row=0; row < "%nrows%"; row += 1) BEGIN
        FOR (col=0; col < "%ncols%"; col += 1) BEGIN
          READ_2DA_ENTRY_FORMER "outtable" "%row%" "%col%" tmp
          SPRINT $outtable2("%row%" "%col%") "%tmp%"
        END
      END

      FOR (row = 0; row < "%nrows%"; row += 1) BEGIN
        SPRINT "name" $outtable2("%row%" "%name_col%")
        SET $"rows"("%name%") = row
      END

      BUT_ONLY

END

DEFINE_ACTION_FUNCTION parse_opts 
STR_VAR opts = ""
RET
column_label
is_transposed
mergetype
ncols
BEGIN
  OUTER_SET i = 0
  OUTER_WHILE (STRING_LENGTH "%opts%" > 0) BEGIN
    OUTER_SET i += 1
    LAF DEBUGPRINT INT_VAR level = 3 STR_VAR func= EVAL "parse_opts: %opts%" END
    OUTER_PATCH_SAVE EVAL "opt_%i%" "%opts%" BEGIN
      PATCH_IF NOT ("%opts%" STRING_CONTAINS_REGEXP ",.*$") BEGIN
        REPLACE_TEXTUALLY ",.*$" ""
      END
      REPLACE_TEXTUALLY " *" ""
    END
    OUTER_PATCH_SAVE opts "%opts%" BEGIN
      REPLACE_TEXTUALLY "^ *[0-9]+ *,?" ""
    END
  END
  OUTER_SET column_label    = (IS_AN_INT EVAL "%opt_1%") ? EVAL "%opt_1%" : 0
  OUTER_SET is_transposed   = (IS_AN_INT EVAL "%opt_2%") ? EVAL "%opt_2%" : 0
  OUTER_SET mergetype       = (IS_AN_INT EVAL "%opt_3%") ? EVAL "%opt_3%" : 0
  OUTER_SET ncols_bg1       = (IS_AN_INT EVAL "%opt_4%") ? EVAL "%opt_4%" : 0
  OUTER_SET ncols_bg2       = (IS_AN_INT EVAL "%opt_5%") ? EVAL "%opt_5%" : ncols_bg1
  OUTER_SET ncols = (GAME_IS ~bgee~) ? ncols_bg1 : ncols_bg2
END
DEFINE_ACTION_MACRO GET_2DAS
BEGIN
  //override 2das:
  

  ACTION_PHP_EACH "2DALIST" AS "2da" => "opts" BEGIN
    LAF parse_opts STR_VAR opts = EVAL "%opts%" RET col_id = column_label ncols = ncols END
    
    LAF 2da_to_asarray
      INT_VAR name_col = EVAL "%col_id%" ncols = ncols
      STR_VAR filename = EVAL ~%2da%.2da~
      RET_ARRAY ~%2da%_rows~ = rows
                ~%2da%_cols~ = cols
                ~%2da%~ = outtable2
    END
    ACTION_IF DEBUG >= 2 BEGIN
      ACTION_PHP_EACH EVAL "%2da%_rows" AS "rowname" => "id" BEGIN
        LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL "GET_2DAS: %2da% ROW %rowname% => %id%" END
      END                                                              
    END                                                                
     ACTION_IF DEBUG >= 2 BEGIN                                        
      ACTION_PHP_EACH EVAL "%2da%_cols" AS "colname" => "id" BEGIN     
        LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL "GET_2DAS: %2da% COLUMN %colname% => %id%" END
      END
    END
  END

  ACTION_DEFINE_ASSOCIATIVE_ARRAY 2DALIST_MOD
  BEGIN
    ~multi_grid~ => "0,0,0,0"
  END

  ACTION_PHP_EACH "2DALIST_MOD" AS "2da" => "opts" BEGIN
    LAF parse_opts STR_VAR opts = EVAL "%opts%" RET col_id = column_label ncols = ncols END
    
    LAF 2da_to_asarray
      INT_VAR name_col = EVAL "%col_id%" ncols = ncols
      STR_VAR filename = EVAL ~%MOD_FOLDER%/lib/%2da%.2da~
              fileto = ~~
      RET_ARRAY ~%2da%_rows~ = rows
                ~%2da%_cols~ = cols
                ~%2da%~ = outtable2
    END
    ACTION_IF DEBUG >= 2 BEGIN
      ACTION_PHP_EACH EVAL "%2da%_rows" AS "rowname" => "id" BEGIN
        LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL "GET_2DAS: %2da% ROW %rowname% => %id%" END
      END
    END
     ACTION_IF DEBUG >= 2 BEGIN
      ACTION_PHP_EACH EVAL "%2da%_cols" AS "colname" => "id" BEGIN
        LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL "GET_2DAS: %2da% COLUMN %colname% => %id%" END
      END
    END
  END

END


DEFINE_ACTION_FUNCTION merge_2da
INT_VAR
  column = 0
  restrict12 = 0
  restrict23 = 0
  kit1   = 0
  kit2   = 0
  kit3   = 0
  class1 = 0
  class2 = 0
  class3 = 0
  multi  = 0
STR_VAR
  filename = ~~
RET output
    restrict12
    restrict23
BEGIN

  OUTER_SPRINT row1str ""
  OUTER_SPRINT row2str ""
  OUTER_SPRINT row3str ""
  OUTER_SPRINT rowstrmulti ""
  OUTER_SPRINT output ""
  OUTER_SPRINT idstr ""

  ACTION_IF NOT column BEGIN
    OUTER_SPRINT myrow "rows"
    OUTER_SPRINT mycol "cols"
  END ELSE BEGIN
    OUTER_SPRINT myrow "cols"
    OUTER_SPRINT mycol "rows"
  END

  OUTER_SPRINT rowkit1 EVAL "%%filename%_%myrow%_%kit1%%"
  OUTER_SPRINT rowkit2 EVAL "%%filename%_%myrow%_%kit2%%"
  OUTER_SPRINT rowkit3 EVAL "%%filename%_%myrow%_%kit3%%"
  
  OUTER_SPRINT rowcls1 EVAL "%%filename%_%myrow%_%class1%%"
  OUTER_SPRINT rowcls2 EVAL "%%filename%_%myrow%_%class2%%"
  OUTER_SPRINT rowcls3 EVAL "%%filename%_%myrow%_%class3%%"
  OUTER_SPRINT rowmulti EVAL "%%filename%_%myrow%_%multi%%"

  
  ACTION_PHP_EACH "%filename%_%mycol%" AS "colname" => "colnum" BEGIN
    ACTION_IF column BEGIN
      
      OUTER_SET valcls1  = (IS_AN_INT EVAL "%rowcls1%") ? $"%filename%"("%colnum%" "%rowcls1%") : 0 - 1 
      OUTER_SET valcls2  = (IS_AN_INT EVAL "%rowcls2%") ? $"%filename%"("%colnum%" "%rowcls2%") : 0 - 1 
      OUTER_SET valcls3  = (IS_AN_INT EVAL "%rowcls3%") ? $"%filename%"("%colnum%" "%rowcls3%") : 0 - 1 
      OUTER_SET valkit1  = (IS_AN_INT EVAL "%rowkit1%") ? $"%filename%"("%colnum%" "%rowkit1%") : valcls1 
      OUTER_SET valkit2  = (IS_AN_INT EVAL "%rowkit2%") ? $"%filename%"("%colnum%" "%rowkit2%") : valcls2 
      OUTER_SET valkit3  = (IS_AN_INT EVAL "%rowkit3%") ? $"%filename%"("%colnum%" "%rowkit3%") : valcls3 
      OUTER_SET valmulti = (IS_AN_INT EVAL "%rowmulti%") ? $"%filename%"("%colnum%" "%rowmulti%") : 0 - 1 
    END ELSE BEGIN                    
      OUTER_SET valcls1  = (IS_AN_INT EVAL "%rowcls1%") ? $"%filename%"("%rowcls1%" "%colnum%") : 0 - 1 
      OUTER_SET valcls2  = (IS_AN_INT EVAL "%rowcls2%") ? $"%filename%"("%rowcls2%" "%colnum%") : 0 - 1 
      OUTER_SET valcls3  = (IS_AN_INT EVAL "%rowcls3%") ? $"%filename%"("%rowcls3%" "%colnum%") : 0 - 1 
      OUTER_SET valkit1  = (IS_AN_INT EVAL "%rowkit1%") ? $"%filename%"("%rowkit1%" "%colnum%") : valcls1 
      OUTER_SET valkit2  = (IS_AN_INT EVAL "%rowkit2%") ? $"%filename%"("%rowkit2%" "%colnum%") : valcls2
      OUTER_SET valkit3  = (IS_AN_INT EVAL "%rowkit3%") ? $"%filename%"("%rowkit3%" "%colnum%") : valcls3 
      OUTER_SET valmulti = (IS_AN_INT EVAL "%rowmulti%") ? $"%filename%"("%rowmulti%" "%colnum%") : 0 - 1 
    END
    
    LAF merge_item 
      INT_VAR 
        valkit1
        valkit2 
        valkit3
        
        valcls1
        valcls2
        valcls3
        
        valmulti
      RET
        rowout = merge
    END
    
    LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL "merge_item: %restrict12% %restrict23% 
    valcls1  = %valcls1%  valkit1  = %valkit1% 
    valcls2  = %valcls2%  valkit2  = %valkit2% 
    valcls3  = %valcls3%  valkit3  = %valkit3% 
    valmulti = %valmulti% 
    tablename = %filename%
    colname   = %colname%  
    output    = %rowout%
    " END
    
    OUTER_SPRINT row1str "%row1str% %valkit1%"
    OUTER_SPRINT row2str "%row2str% %valkit2%"
    OUTER_SPRINT rowstrmulti "%rowstrmulti% %valmulti%"
    ACTION_IF FLAG_TRIPLECLASS BEGIN OUTER_SPRINT row3str "%row3str% %valkit3%" END
    OUTER_SPRINT idstr   "%idstr% %colname%"
    OUTER_SPRINT output "%output% %rowout%"
  END
  ACTION_IF FLAG_TRIPLECLASS BEGIN
  PRINT "%filename%:
%rowstrmulti% (%multi%)
%row1str% (%class1%-%kit1%)
%row2str% (%class2%-%kit2%)
%row3str% (%class3%-%kit3%)
%output%"
  END ELSE BEGIN         
  PRINT "%filename%:
%rowstrmulti% (%multi%)
%row1str% (%class1%-%kit1%)
%row2str% (%class2%-%kit2%)
%output%"
  END
END

DEFINE_ACTION_FUNCTION merge_item
INT_VAR //say FMC Kensai sling
valkit1  = 0
valkit2  = 0
valkit3  = 0
valcls1  = 0
valcls2  = 0
valcls3  = 0
valmulti = 0
RET
merge 
BEGIN 
  OUTER_PATCH "dummy" BEGIN
    
    PATCH_IF valmulti = 0 - 1 BEGIN
      // DETERMINE MULTI FROM BASE
      valmulti = (valkit1 >= 0) ? valkit1 :
                 (valkit2 >= 0) ? valkit2 :
                 (valkit3 >= 0) ? valkit3 :
                 (valcls1 >= 0) ? valcls1 :
                 (valcls2 >= 0) ? valcls2 :
                 (valcls3 >= 0) ? valcls3 :
                 0// do before changing e.g. for backstab table
    valcls1 = (valcls1 >= 0) ? valcls1 : 0
    valcls2 = (valcls2 >= 0) ? valcls2 : 0
    valcls3 = (valcls3 >= 0) ? valcls3 : 0
    valkit1 = (valkit1 >= 0) ? valkit1 : valcls1 
    valkit2 = (valkit2 >= 0) ? valkit2 : valcls2 
    valkit3 = (valkit3 >= 0) ? valkit3 : valcls3 
    END
    // Assume multi given.
    diff_1 = (valkit1 - valcls1)  //assume these are all given.
    diff_2 = (valkit2 - valcls2)  //assume these are all given.
    diff_3 = (valkit3 - valcls3)  //assume these are all given.
    diffgain = 0
    difflose = 0
    FOR (i = 1;i <= 3; i += 1) BEGIN
      PATCH_IF EVAL "%diff_%i%%" >= diffgain BEGIN
        diffgain = EVAL "%diff_%i%%"
        kitgain  = EVAL "%valkit%i%%"
      END
      PATCH_IF EVAL "%diff_%i%%" <= difflose BEGIN
        difflose = EVAL "%diff_%i%%"
        kitlose  = EVAL "%valkit%i%%"
      END
    END
    merge = (difflose < 0) AND (kitlose < valmulti) ? kitlose :
            (diffgain > 0) AND (kitgain > valmulti) ? kitgain : 
            valmulti
  END


  LAF DEBUGPRINT INT_VAR SEVERITY = 3 STR_VAR MESSAGE = EVAL ~merge_item: 
    valcls1   = %valcls1% valkit1   = %valkit1% diff_1 = %diff_1%
    valcls2   = %valcls2% valkit2   = %valkit2% diff_2 = %diff_2%
    valcls3   = %valcls3% valkit3   = %valkit3% diff_3 = %diff_3%
    valmulti  = %valmulti%
    diffgain = %diffgain% kitgain = %kitgain%
    difflose = %difflose% kitlose = %kitlose%
    merge = %merge%
~ END

END 

// returns SORTED array of abilities at a given level
DEFINE_ACTION_FUNCTION get_clab_level
  INT_VAR level = 1
  STR_VAR clab  = "" pre = ""
  RET numabil levels
  RET_ARRAY abilities
BEGIN
  ACTION_DEFINE_ARRAY abilities BEGIN END
  OUTER_SET numabil = 0
  OUTER_SET levels = 0 - 1
  OUTER_SPRINT abilstr ""
  ACTION_IF (EVAL "%clab%" STRING_CONTAINS_REGEXP "\.2DA") BEGIN OUTER_SPRINT clab "%clab%.2DA" END
  ACTION_IF FILE_EXISTS_IN_GAME EVAL "%clab%" BEGIN  
    PRINT "file exists."
    ACTION_IF level < 1 BEGIN FAIL ~level <%level%> is too low~ END
    PRINT "level sufficient."
    COPY_EXISTING "%clab%" ~override~
      COUNT_2DA_COLS levels
      READ_2DA_ENTRIES_NOW ~array~ levels
      FOR (row = 0; row < ~%array%~; ++row) BEGIN
        READ_2DA_ENTRY_FORMER ~array~ row level ~ability~
        PATCH_IF NOT (~%ability%~ STRING_EQUAL ~****~) BEGIN
          SPRINT $abilities("%numabil%") EVAL ~%pre%%ability%~
          SPRINT abilstr EVAL "%abilstr% %pre%%ability%"
          numabil += 1
        END
      END
    BUT_ONLY
    OUTER_PATCH "" BEGIN
      SPRINT sort_array_name ~abilities~
      SET sort_size    = numabil
      SET sort_numeric = 0
      SET sort_case    = 0
      LPM SORT_ARRAY
    END
  END ELSE BEGIN PRINT ~NOTICE: COULD NOT FIND CLAB: %clab%. SKIPPING.~ END
  OUTER_SET MYlevel = level
  LAF DEBUGPRINT INT_VAR SEVERITY = 3 STR_VAR MESSAGE = EVAL 
"get_clab_level: 
  level: %MYlevel%
  clab : %clab%
  pre  : %pre%
  numabil: %numabil%
  levels: %levels%
  abils: %abilstr%
"
  END
  
END

DEFINE_PATCH_FUNCTION merge_clab_level
  INT_VAR level = 1
  STR_VAR
  clabkit1 = "" clabcls1 = "" pre1 = ""
  clabkit2 = "" clabcls2 = "" pre2 = ""
  clabkit3 = "" clabcls3 = "" pre3 = ""
  RET levels
  RET_ARRAY 
  abmerge
BEGIN
  CLEAR_ARRAY abmerge

  INNER_ACTION BEGIN
    LAF merge_clab_level
      INT_VAR level = level
      STR_VAR
      clabkit1 clabcls1 pre1
      clabkit2 clabcls2 pre2
      clabkit3 clabcls3 pre3
      RET levels
      RET_ARRAY 
      abmerge 
    END
  END
END

DEFINE_ACTION_FUNCTION merge_clab_level
  INT_VAR level = 0
  STR_VAR
  clabkit1 = "" clabcls1 = "" pre1 = ""
  clabkit2 = "" clabcls2 = "" pre2 = ""
  clabkit3 = "" clabcls3 = "" pre3 = ""
  RET levels
  RET_ARRAY 
  abmerge
BEGIN
  LAF DEBUGPRINT STR_VAR MESSAGE = EVAL 
"merge_clab_level: level=%level%
  %clabkit1% %clabkit2% %clabkit3%
  %clabcls1% %clabcls2% %clabcls3%
  %pre1% %pre2% %pre3%"
  END
  ACTION_DEFINE_ASSOCIATIVE_ARRAY  levels_ALL  BEGIN END
  ACTION_DEFINE_ASSOCIATIVE_ARRAY  numabils    BEGIN END
  ACTION_DEFINE_ASSOCIATIVE_ARRAY  ind_array   BEGIN END                                                     
  OUTER_FOR (i = 1; i <= NUMCLASS; ++i) BEGIN
    OUTER_SPRINT clab EVAL "%clabkit%i%%" OUTER_SPRINT pre EVAL ~%pre_%i%%~
    LAF get_clab_level INT_VAR level = level STR_VAR pre = EVAL "%pre%" clab = EVAL "%clab%"
                       RET $levels_ALL(EVAL "kit%i%") = levels $numabils(EVAL "kit%i%") = numabil 
                       RET_ARRAY EVAL "abils_kit%i%" = abilities END
    OUTER_SPRINT clab EVAL "%clabcls%i%%" OUTER_SPRINT pre EVAL ~%pre_%i%%~
    LAF get_clab_level INT_VAR level = level STR_VAR pre = EVAL "%pre%" clab = EVAL "%clab%"
                       RET $levels_ALL(EVAL "cls%i%") = levels $numabils(EVAL "cls%i%") = numabil 
                       RET_ARRAY EVAL "abils_cls%i%" = abilities END
    OUTER_SET $ind_array(EVAL "kit%i%") = 0
    OUTER_SET $ind_array(EVAL "cls%i%") = 0
   
   
  END
  ACTION_CLEAR_ARRAY abmerge
  ACTION_DEFINE_ARRAY  abmerge   BEGIN END                                                     

  OUTER_PATCH "" BEGIN
    SPRINT MINWITHIN_arrayname ~levels_ALL~
    SET MINWITHIN_boundlower = 0
    SET MINWITHIN_boundupper = 0 - 1
    SET MINWITHIN_fail = 1
    LPM MINWITHIN
    levels = "%MIN_value%"
    numabmerge = 0
    not_done_merging = 1
    
    WHILE not_done_merging BEGIN
      SPRINT MINWITHIN_arrayname ~ind_array~
      SET MINWITHIN_boundlower = 0
      SET MINWITHIN_fail = 0
      SPRINT MINWITHIN_boundupper ~numabils~
      LPM MINWITHIN // returns MIN_key, MIN_value
      SPRINT strabil ""
      
      PATCH_IF IS_AN_INT "%MIN_value%" BEGIN
        PATCH_IF "%MIN_value%" < EVAL "%numabils_%MIN_key%%" BEGIN
          SPRINT curr_abil $"abils"(EVAL "%MIN_key%" EVAL "%MIN_value%")
          any_inds_valid = 0
          PHP_EACH ~ind_array~ AS ~name~ => ~ind~ BEGIN
            PATCH_IF (ind < EVAL ~numabils_%name%~) AND (ind >= 0) BEGIN
              SPRINT abil $"abils"("%name%" "%ind%")
              SPRINT strabil EVAL "%strabil% val%name%_%ind% = %abil%"
              SET EVAL ~val%name%~ = (~%abil%~ STRING_EQUAL ~%curr_abil%~) ? 1 : 0
              SET EVAL ~ind_array_%name%~ =  EVAL ~%val%name%%~  ? EVAL ~%ind_array_%name%%~ + 1 : EVAL ~%ind_array_%name%%~
              SET any_inds_valid = ( EVAL ~%ind_array_%name%%~ < EVAL ~numabils_%name%~) OR any_inds_valid
            END ELSE BEGIN
              SET EVAL ~val%name%~ = 0
            END
          END
          not_done_merging = any_inds_valid
          INNER_ACTION BEGIN
            ACTION_IF FLAG_TRIPLECLASS BEGIN
            LAF merge_item
              INT_VAR valkit1      valkit2      valkit3      valcls1      valcls2      valcls3      valmulti = 0
              RET merge
            END
            END ELSE BEGIN
            LAF merge_item
              INT_VAR valkit1      valkit2      valcls1      valcls2      valmulti = 0
              RET merge
            END
            END
            LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL 
              "merge_clab_level: curr: %curr_abil%, compare: %strabil% => %merge%"
            END
          END
          PATCH_IF merge BEGIN
            INNER_ACTION BEGIN LAF DEBUGPRINT INT_VAR SEVERITY = 3 STR_VAR MESSAGE = EVAL "merge_clab_level: merging %curr_abil% into $abmerge(%numabmerge%)..." END END
            SPRINT $abmerge("%numabmerge%") EVAL "%curr_abil%"
            numabmerge += 1
          END
        END ELSE BEGIN
          not_done_merging = 0
        END
      END ELSE BEGIN
        not_done_merging = 0
      END
      
    END 
  END
  
END

DEFINE_PATCH_MACRO MINWITHIN
BEGIN
//define arrays MINWITHIN_arrayname MINWITHIN_boundlower MINWITHIN_boundupper
SPRINT MIN_key  ""
SPRINT MIN_value  ""
DEFAULT_LOW = 0
DEFAULT_HIGH = 0 - 1
DEFAULT_FAIL = 1
PATCH_IF NOT (IS_AN_INT "%MINWITHIN_fail%") BEGIN MINWITHIN_fail = DEFAULT_FAIL END
PHP_EACH "%MINWITHIN_arrayname%" AS "key" => "value" BEGIN
  PATCH_IF (IS_AN_INT EVAL "%MINWITHIN_boundlower%") BEGIN
    lobound = MINWITHIN_boundlower
  END ELSE BEGIN 
    PATCH_IF (IS_AN_INT EVAL "%%MINWITHIN_boundlower%_%key%%") BEGIN
      lobound = EVAL "%%MINWITHIN_boundlower%_%key%%"
    END ELSE BEGIN
      lobound = DEFAULT_LOW
    END
  END
  PATCH_IF (IS_AN_INT EVAL "%MINWITHIN_boundupper%") BEGIN
    hibound = MINWITHIN_boundupper
  END ELSE BEGIN 
    PATCH_IF (IS_AN_INT EVAL "%%MINWITHIN_boundupper%_%key%%") BEGIN
      hibound = EVAL "%%MINWITHIN_boundupper%_%key%%"
    END ELSE BEGIN
      hibound = DEFAULT_HIGH
    END
  END   
  INNER_ACTION BEGIN
  LAF DEBUGPRINT INT_VAR SEVERITY = 3 STR_VAR MESSAGE = EVAL 
    "MINWITHIN %MINWITHIN_arrayname%: %key% => %value%, %MINWITHIN_boundlower% : %lobound% %MINWITHIN_boundupper% : %hibound%"
  END
  END
  PATCH_IF (IS_AN_INT "%value%") BEGIN
    PATCH_IF (value >= lobound) AND ((hibound >= 0) ? value < hibound : 1) BEGIN
      PATCH_IF (IS_AN_INT "%MIN_value%") BEGIN
        PATCH_IF (value < MIN_value) BEGIN
          SET MIN_value = value
          SPRINT MIN_key "%key%"
        END
      END ELSE BEGIN
        SET MIN_value = value
        SPRINT MIN_key "%key%"
      END
    END
  END
END
PATCH_IF NOT (IS_AN_INT "%MIN_value%") BEGIN 
  PATCH_IF MINWITHIN_fail BEGIN PATCH_FAIL ~No min value found within bounds for %MINWITHIN_arrayname%~ END 
END
INNER_ACTION BEGIN
LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL 
  "MINWITHIN %MINWITHIN_arrayname%: MIN_value %MIN_value%, MIN_key %MIN_key% |
       LOWER BOUND: %MINWITHIN_boundlower% : %lobound% 
       UPPER BOUND: %MINWITHIN_boundupper% : %hibound%"
END
END
END

DEFINE_ACTION_FUNCTION merge_clab 
STR_VAR
  clabkit1 = "" clabcls1 = "" pre_1 = ""
  clabkit2 = "" clabcls2 = "" pre_2 = ""
  clabkit3 = "" clabcls3 = "" pre_3 = ""
  clabmerge = ""
BEGIN
  LAF DEBUGPRINT STR_VAR MESSAGE = EVAL 
"merge_clab: 
  %clabkit1% %clabkit2% %clabkit3%
  %clabcls1% %clabcls2% %clabcls3%
  %pre_1% %pre_2% %pre_3%"
  END
  OUTER_SET levels = 50
  ACTION_IF ! FILE_EXISTS_IN_GAME clabmerge BEGIN
    COPY_EXISTING ~BLANKCLAB.2DA~ ~override/%clabmerge%~
  END
  COPY_EXISTING ~%clabmerge%~ ~override~
    FOR (level = 1; level < levels; ++level) BEGIN
      CLEAR_ARRAY abmerge
      DEFINE_ARRAY abmerge BEGIN END
      LPF merge_clab_level
          INT_VAR level = level
          STR_VAR
          clabkit1 = EVAL "%clabkit1%" clabcls1 = EVAL "%clabcls1%" pre1 = EVAL "%pre_1%"
          clabkit2 = EVAL "%clabkit2%" clabcls2 = EVAL "%clabcls2%" pre2 = EVAL "%pre_2%"
          clabkit3 = EVAL "%clabkit3%" clabcls3 = EVAL "%clabcls3%" pre3 = EVAL "%pre_3%"
          RET levels
          RET_ARRAY 
          abmerge
      END
      SPRINT mergestr ""
      PHP_EACH "abmerge" AS "id" => "ability" BEGIN
        LPF bl_add_ability_to_clab INT_VAR level STR_VAR ability END
        SPRINT mergestr EVAL "%mergestr% %id% => %ability%"
      END
      INNER_ACTION BEGIN LAF DEBUGPRINT INT_VAR SEVERITY = 2 STR_VAR MESSAGE = EVAL "merge_clab: level = %level%, merged_abils = %mergestr%" END END
    END
  BUT_ONLY
END
