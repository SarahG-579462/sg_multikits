
DEFINE_ACTION_FUNCTION DEBUGPRINT INT_VAR SEVERITY = 1 STR_VAR MESSAGE = "DEBUGPRINT" BEGIN 
ACTION_IF DEBUG >= SEVERITY BEGIN
  PRINT "DEBUG%SEVERITY%: %MESSAGE%"
END
END
DEFINE_PATCH_FUNCTION DEBUGPRINT INT_VAR SEVERITY = 1 STR_VAR MESSAGE = "DEBUGPRINT" BEGIN 
INNER_ACTION BEGIN LAF DEBUGPRINT INT_VAR SEVERITY STR_VAR MESSAGE END END
END 

DEFINE_ACTION_FUNCTION init_globals STR_VAR filename = "SG_GLOBALS" RET filename BEGIN
  ACTION_IF ! FILE_EXISTS_IN_GAME ~override/%filename%.2DA~ THEN BEGIN
    LAF DEBUGPRINT STR_VAR MESSAGE = EVAL "init_globals: copying EMPTY2DA to %filename%" END
    COPY ~%MOD_FOLDER%/data/EMPTY2DA.2DA~ ~override/%filename%.2DA~
  END ELSE BEGIN LAF DEBUGPRINT STR_VAR MESSAGE = EVAL "init_globals: %filename% already exists." END
    END
END

DEFINE_ACTION_FUNCTION clear_globals STR_VAR filename = "SG_GLOBALS" BEGIN
  LAF DEBUGPRINT STR_VAR MESSAGE = "clear_globals" END
  DELETE ~override/%filename%.2DA~
END

DEFINE_ACTION_FUNCTION rglobal STR_VAR name = ~~ RET value BEGIN
  LAF DEBUGPRINT STR_VAR MESSAGE = "rglobal" END
  LAF init_globals RET filename = filename END
  OUTER_SPRINT value ""
  COPY_EXISTING ~%filename%.2DA~ ~override~
    COUNT_2DA_COLS cols
    COUNT_2DA_ROWS cols rows
    READ_2DA_ENTRIES_NOW "globals" cols
    FOR (row = 0; row < rows; ++row) BEGIN
 
      READ_2DA_ENTRY_FORMER "globals" row 0 "currrow"
      READ_2DA_ENTRY_FORMER "globals" row 1 "currval"
      
      PATCH_IF(EVAL "%currrow%" STR_EQ EVAL "%name%") BEGIN
        row = rows
        value = EVAL "%currval%"
      END
    END
  BUT_ONLY
  ACTION_IF "%value%" STR_EQ "" BEGIN
    FAIL ~could not read value: %name%.~
  END
END

DEFINE_ACTION_FUNCTION wglobal INT_VAR value = 0 STR_VAR name = ~~ BEGIN
  LAF DEBUGPRINT STR_VAR MESSAGE = "wglobal" END
  LAF init_globals RET filename = filename END
  COPY_EXISTING ~%filename%.2DA~ ~override~
    set_value = 0
    COUNT_2DA_COLS cols
    COUNT_2DA_ROWS cols rows
    READ_2DA_ENTRIES_NOW "globals" cols
    FOR (row = 0; row < rows; ++row) BEGIN
      READ_2DA_ENTRY_FORMER "globals" row 0 "currrow"
      READ_2DA_ENTRY_FORMER "globals" row 1 "currval"
      //PATCH_PRINT "wglobal %currrow%: %currval%"
      PATCH_IF (EVAL "%currrow%" STR_EQ EVAL "%name%") BEGIN
        //PATCH_PRINT "WRITE %row% %currrow% %name% %value% %filename% %DEST_FILESPEC% %cols%"
        SET_2DA_ENTRY row 1 cols ~%value%~
        row = rows
        set_value = 1
      END
    END
  
  ACTION_IF set_value = 0 BEGIN
    LAF DEBUGPRINT STR_VAR MESSAGE = EVAL "wglobal: appending %name% %value%" END
    APPEND ~%filename%.2DA~ ~%name% %value% 0~
    
  END
END

DEFINE_ACTION_FUNCTION increment_global STR_VAR name = ~~ RET valuenew BEGIN
  LAF DEBUGPRINT STR_VAR MESSAGE = "increment_global" END
  LAF rglobal STR_VAR name = EVAL "%name%" RET value = value END
  OUTER_SET valuenew = value + 1
  LAF wglobal INT_VAR value = valuenew STR_VAR name =  EVAL "%name%" END
END
/**
 * Converts any decimal number into a hexadecimal number
 */
DEFINE_ACTION_FUNCTION ~m7#int_to_hex_str~
	INT_VAR
		"number" = 0
	RET
		"hexstr"
BEGIN
  LAF DEBUGPRINT STR_VAR MESSAGE = "m7#int_to_hex_str" END

	ACTION_DEFINE_ARRAY "hexdigits" BEGIN
		~0~ ~1~ ~2~ ~3~ ~4~ ~5~ ~6~ ~7~ ~8~ ~9~
		~a~ ~b~ ~c~ ~d~ ~e~ ~f~
	END
	ACTION_IF ("%number%" == 0) BEGIN
		OUTER_SPRINT "hexstr" "0x00000000"
	END ELSE BEGIN
		OUTER_SET "num" = "%number%"
		OUTER_SET signed = 0

		ACTION_IF ("%num%" < 0) BEGIN
			OUTER_SET signed = 1
			OUTER_SET "num" = "%num%"
		END
		OUTER_SPRINT "hexstr" ""
		OUTER_WHILE ("%num%" != 0) BEGIN
			OUTER_SET "digit" = ("%num%" & 15)
      //ACTION_IF signed == 1 BEGIN OUTER_SET digit = 15 - "%digit%" END
			OUTER_SET "%num%" >>= 4
			OUTER_SPRINT "hexstr" EVAL "%hexdigits_%digit%%%hexstr%"
		END
    
		OUTER_WHILE ((STRING_LENGTH "%hexstr%") < 8) BEGIN
			OUTER_SPRINT "hexstr" "0%hexstr%"
		END
		OUTER_SPRINT "hexstr" "0x%hexstr%"
	END
END 


/** a7#SORT_ARRAY (thanks argent77)
 * This patch macro sorts an array lexicographically or numerically.
 * Parameters:
 * INT_VAR sort_size        (Optional) Number of elements in the array. Specify negative size to 
 *                                     perform auto-detection. (Default: Auto-detect size)
 * INT_VAR sort_reverse     (Optional) Set to zero to sort in ascending order. Set to non-zero to 
 *                                     sort in descending order. (Default: Sort in ascending order)
 * INT_VAR sort_numeric     (Optional) Set to zero to sort array elements lexicographically. Set 
 *                                     to non-zero to sort numerically. (Default: Sort lexicographically)
 * INT_VAR sort_case        (Optional) Set to zero to ignore case. Set to non-zero to sort case-sensitive.
 *                                     Ignored when sorting numerically. (Default: Ignore case)
 * STR_VAR sort_array_name  (Mandatory) The array's base name.
 */
DEFINE_PATCH_MACRO SORT_ARRAY
BEGIN
  LOCAL_SET idx = 0 LOCAL_SET i = 0 LOCAL_SET j = 0
  LOCAL_SET v1 = 0 LOCAL_SET v2 = 0
  LOCAL_SPRINT s1 ~~ LOCAL_SPRINT s2 ~~
  LOCAL_SET c = VARIABLE_IS_SET ~sort_case~ ? sort_case : 0
  LOCAL_SET n = VARIABLE_IS_SET ~sort_numeric~ ? sort_numeric : 0
  LOCAL_SET r = VARIABLE_IS_SET ~sort_reverse~ ? sort_reverse : 0
  LOCAL_SET s = VARIABLE_IS_SET ~sort_size~ ? sort_size : "-1"

  PATCH_IF (NOT ~%sort_array_name%~ STR_EQ ~~) BEGIN
    // Auto-detect array size
    PATCH_IF (s < 0) BEGIN
      SET idx = 0
      WHILE (idx != "-1") BEGIN
        PATCH_IF (VARIABLE_IS_SET EVAL ~%sort_array_name%_%idx%~) BEGIN
          SET idx += 1
        END ELSE BEGIN
          SET s = idx
          SET idx = "-1"
        END
      END
    END

    // Sort array using "Selection Sort" algorithm
    FOR (j = 0; j < s - 1; ++j) BEGIN
      // Find and mark index of lowest/highest value in remaining sublist
      SET idx = j
      PATCH_IF (n) BEGIN SET v1 = EVAL ~%sort_array_name%_%idx%~ END ELSE BEGIN TEXT_SPRINT s1 EVAL ~%%sort_array_name%_%idx%%~ END
      FOR (i = j + 1; i < s; ++i) BEGIN
        PATCH_IF (n) BEGIN SET v2 = EVAL ~%sort_array_name%_%i%~ END ELSE BEGIN TEXT_SPRINT s2 EVAL ~%%sort_array_name%_%i%%~ END
        PATCH_IF (n && (r && v2 > v1) || (NOT r && v2 < v1)) ||
                 (NOT n && (r && c && ~%s1%~ STRING_COMPARE ~%s2%~ < 0) || 
                           (r && NOT c && ~%s1%~ STRING_COMPARE_CASE ~%s2%~ < 0) ||
                           (NOT r && c && ~%s1%~ STRING_COMPARE ~%s2%~ > 0) ||
                           (NOT r && NOT c && ~%s1%~ STRING_COMPARE_CASE ~%s2%~ > 0)) BEGIN
          SET idx = i
          PATCH_IF (n) BEGIN SET v1 = EVAL ~%sort_array_name%_%idx%~ END ELSE BEGIN TEXT_SPRINT s1 EVAL ~%%sort_array_name%_%idx%%~ END
        END
      END

      // Swap values if needed
      PATCH_IF (idx != j) BEGIN
        PATCH_IF (n) BEGIN
          SET v1 = EVAL ~%sort_array_name%_%idx%~
          SET EVAL ~%sort_array_name%_%idx%~ = EVAL ~%sort_array_name%_%j%~
          SET EVAL ~%sort_array_name%_%j%~ = v1
        END ELSE BEGIN
          TEXT_SPRINT s1 EVAL ~%%sort_array_name%_%idx%%~
          TEXT_SPRINT EVAL ~%sort_array_name%_%idx%~ EVAL ~%%sort_array_name%_%j%%~
          TEXT_SPRINT EVAL ~%sort_array_name%_%j%~ ~%s1%~
        END
      END
    END
  END
END

/** Action macro for sorting arrays. */
DEFINE_ACTION_MACRO SORT_ARRAY
BEGIN
  OUTER_PATCH ~~ BEGIN LPM SORT_ARRAY END
END 

DEFINE_PATCH_FUNCTION bl_add_ability_to_clab
	INT_VAR
		level = 1
	STR_VAR
		ability = ~****~
BEGIN

	COUNT_2DA_COLS cols									//count columns
	COUNT_2DA_ROWS cols rows							//count rows
	READ_2DA_ENTRIES_NOW array cols						//store entries in array
  added = 0
  PATCH_IF level >= cols BEGIN
    PATCH_WARN "WARNING: Cannot add ability %ability% to %SOURCE_RES%, since level %level% >= max levels %cols%, skipping."
  END ELSE BEGIN
    FOR (row = 0; row < array; ++row) BEGIN				//loop through rows
      READ_2DA_ENTRY_FORMER array row level value		//entry value
      
      PATCH_IF (~%value%~ STRING_EQUAL ~****~) BEGIN	//no value
        SET_2DA_ENTRY row level cols ~%ability%~	//add ability
        added = 1
        row = array//~break
      END
    END
    PATCH_IF added == 0 BEGIN
      SPRINT newrow "ABILITY    "
      FOR (col = 1; col < cols; ++col) BEGIN
        SPRINT newrow "%newrow%****       "
      END
      INSERT_2DA_ROW row cols "%newrow%"
      SET_2DA_ENTRY row level cols ~%ability%~
    END
  END
  PRETTY_PRINT_2DA //formatting
END

DEFINE_PATCH_FUNCTION remove_abilities_from_clab 
  // Deletes all abilities at a given level, except those matching the regexp ~%except%~. 
  // Returns an array of removed abilities, and the total number of levels..
	INT_VAR
		level = 1
  STR_VAR
    except = ~~
  RET
    levels
    num_abil
	RET_ARRAY
		abilities
BEGIN
  PATCH_DEFINE_ARRAY abilities BEGIN END
  ab_ind_curr = 0
	COUNT_2DA_COLS levels									//count columns
	COUNT_2DA_ROWS levels rows							//count rows
	READ_2DA_ENTRIES_NOW array levels						//store entries in array
  added = 0
  PATCH_IF level >= cols BEGIN
    PATCH_WARN "WARNING: Cannot remove abilities from %SOURCE_RES%, since level %level% >= max levels %cols%, skipping."
  END ELSE BEGIN
    FOR (row = 0; row < array; ++row) BEGIN				//loop through rows
      READ_2DA_ENTRY_FORMER array row level value		//entry value
      PATCH_IF NOT (~%value%~ STRING_EQUAL ~****~) BEGIN	//has value
        PATCH_IF (~%except%~ STR_EQ ~~) OR (/* value does not match regexp except*/ ~%value%~ STRING_CONTAINS_REGEXP ~%except%~) BEGIN
          LPF DEBUGPRINT INT_VAR SEVERITY = 1 STR_VAR MESSAGE = EVAL "deleting ability %value% from clab..." END
          SPRINT $abilities(EVAL ~%ab_ind_curr%~) ~%value%~
          SET_2DA_ENTRY row level levels ~****~	//add ability
          ab_ind_curr += 1
        END
      END
    END
  END
  PRETTY_PRINT_2DA
  num_abil = ab_ind_curr
END

// returns SORTED array of abilities at a given level
DEFINE_ACTION_FUNCTION get_clab_level
  INT_VAR level = 1
  STR_VAR clab  = "" pre = ""
  RET numabil levels
  RET_ARRAY abilities
BEGIN
  ACTION_DEFINE_ARRAY abilities BEGIN END
  OUTER_SET numabil = 0
  OUTER_SET levels = 0 - 1
  OUTER_SPRINT abilstr ""
  ACTION_IF (EVAL "%clab%" STRING_CONTAINS_REGEXP "\.2DA") BEGIN OUTER_SPRINT clab "%clab%.2DA" END
  ACTION_IF FILE_EXISTS_IN_GAME EVAL "%clab%" BEGIN  
    COPY_EXISTING "%clab%" ~override~
      COUNT_2DA_COLS levels
      READ_2DA_ENTRIES_NOW ~array~ levels
      FOR (row = 0; row < ~%array%~; ++row) BEGIN
        READ_2DA_ENTRY_FORMER ~array~ row level ~ability~
        PATCH_IF NOT (~%ability%~ STRING_EQUAL ~****~) BEGIN
          SPRINT $abilities("%numabil%") EVAL ~%pre%%ability%~
          SPRINT abilstr EVAL "%abilstr% %pre%%ability%"
          numabil += 1
        END
      END
    BUT_ONLY
    OUTER_PATCH "" BEGIN
      SPRINT sort_array_name ~abilities~
      SET sort_size    = numabil
      SET sort_numeric = 0
      SET sort_case    = 0
      LPM SORT_ARRAY
    END
  END ELSE BEGIN PRINT ~NOTICE: COULD NOT FIND CLAB: %clab%. SKIPPING.~ END
  OUTER_SET MYlevel = level
  LAF DEBUGPRINT INT_VAR SEVERITY = 3 STR_VAR MESSAGE = EVAL 
"get_clab_level: 
  level: %MYlevel%
  clab : %clab%
  pre  : %pre%
  numabil: %numabil%
  levels: %levels%
  abils: %abilstr%
"
  END
  
END
