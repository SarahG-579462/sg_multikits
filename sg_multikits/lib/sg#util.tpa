
DEFINE_ACTION_FUNCTION DEBUGPRINT STR_VAR func = "DEBUGPRINT" BEGIN 
ACTION_IF DEBUG == 1 BEGIN
  PRINT "ENTERING FUNCTION: %func%"
END
END
DEFINE_ACTION_FUNCTION init_globals STR_VAR filename = "SG_GLOBALS" RET filename BEGIN
  ACTION_IF ! FILE_EXISTS_IN_GAME ~%filename%.2DA~ THEN BEGIN
    <<<<<<<< empty
    >>>>>>>>
    COPY + empty ~override/%filename%.2DA~
  END
END

DEFINE_ACTION_FUNCTION clear_globals STR_VAR filename = "SG_GLOBALS" BEGIN
  DELETE ~override/%filename%.2DA~
END

DEFINE_ACTION_FUNCTION rglobal STR_VAR name = ~~ RET value BEGIN
  LAF init_globals RET filename = filename END
  OUTER_SPRINT value ""
  COPY_EXISTING ~override/%filename%.2DA~ ~override~
    READ_2DA_ENTRIES_NOW "globals" 1
    FOR (i = 0; i < globals; ++i) BEGIN
      READ_2DA_ENTRY_FORMER "globals" i 0 "currrow"
      READ_2DA_ENTRY_FORMER "globals" i 1 "currval"
      PATCH_IF(EVAL "%currrow%" STR_EQ EVAL "%name%") BEGIN
        i = globals
        value = EVAL "%currval%"
      END
    END
  BUT_ONLY
  ACTION_IF "%value%" STR_EQ "" BEGIN
    FAIL ~could not read value: %name%.~
  END
END

DEFINE_ACTION_FUNCTION wglobal INT_VAR value = 0 STR_VAR name = ~~ BEGIN
  LAF init_globals RET filename = filename END
  COPY_EXISTING ~override/%filename%.2DA~ ~override~
    READ_2DA_ENTRIES_NOW "globals" 1
    set_value = 0
    FOR (i = 0; i < globals; ++i) BEGIN
      READ_2DA_ENTRY_FORMER "globals" i 0 "currrow"
      READ_2DA_ENTRY_FORMER "globals" i 1 "currval"
      PATCH_IF (EVAL "%currrow%" STR_EQ EVAL "%name%") BEGIN
        i = globals
        SET_2DA_ENTRY i 1 value
        set_value = 1
      END
    END
    PATCH_IF NOT set_value BEGIN
      INSERT_2DA_ROW globals 1 EVAL "%name% %value%"
      set_value = 1
    END
  BUT_ONLY
  ACTION_IF set_value = 0 BEGIN
    FAIL ~could not write value: %name%~
  END
END

DEFINE_ACTION_FUNCTION increment_global STR_VAR name = ~~ RET valuenew BEGIN
LAF rglobal STR_VAR name = EVAL "%name%" RET value = value END
OUTER_SET valuenew = value + 1
LAF wglobal INT_VAR value = valuenew STR_VAR name =  EVAL "%name%" END
END
/**
 * Converts any decimal number into a hexadecimal number
 */
DEFINE_ACTION_FUNCTION ~m7#int_to_hex_str~
	INT_VAR
		"number" = 0
	RET
		"hexstr"
BEGIN
	ACTION_DEFINE_ARRAY "hexdigits" BEGIN
		~0~ ~1~ ~2~ ~3~ ~4~ ~5~ ~6~ ~7~ ~8~ ~9~
		~a~ ~b~ ~c~ ~d~ ~e~ ~f~
	END
	ACTION_IF ("%number%" == 0) BEGIN
		OUTER_SPRINT "hexstr" "0x00000000"
	END ELSE BEGIN
		OUTER_SET "num" = "%number%"
		OUTER_SET signed = 0

		ACTION_IF ("%num%" < 0) BEGIN
			OUTER_SET signed = 1
			OUTER_SET "num" = "%num%"
		END
		OUTER_SPRINT "hexstr" ""
		OUTER_WHILE ("%num%" != 0) BEGIN
			OUTER_SET "digit" = ("%num%" & 15)
      //ACTION_IF signed == 1 BEGIN OUTER_SET digit = 15 - "%digit%" END
			OUTER_SET "%num%" >>= 4
			OUTER_SPRINT "hexstr" EVAL "%hexdigits_%digit%%%hexstr%"
		END
    
		OUTER_WHILE ((STRING_LENGTH "%hexstr%") < 8) BEGIN
			OUTER_SPRINT "hexstr" "0%hexstr%"
		END
		OUTER_SPRINT "hexstr" "0x%hexstr%"
	END
END 


DEFINE_PATCH_FUNCTION bl_add_ability_to_clab
	INT_VAR
		level = 1
	STR_VAR
		ability = ~****~
BEGIN
	COUNT_2DA_COLS cols									//count columns
	COUNT_2DA_ROWS cols rows							//count rows
	READ_2DA_ENTRIES_NOW array cols						//store entries in array
  added = 0
	FOR (row = 0; row < array; ++row) BEGIN				//loop through rows
		READ_2DA_ENTRY_FORMER array row level value		//entry value
		PATCH_IF (~%value%~ STRING_EQUAL ~****~) BEGIN	//no value
			SET_2DA_ENTRY row level cols ~%ability%~	//add ability
      added = 1
			row = array//~break
		END
	END
  PATCH_IF added == 0 BEGIN
    SPRINT newrow "ABILITY    "
    FOR (col = 1; col < cols; ++col) BEGIN
      SPRINT newrow "%newrow%****       "
    END
    INSERT_2DA_ROW row cols "%newrow%"
    SET_2DA_ENTRY row level cols ~%ability%~
  END
	PRETTY_PRINT_2DA //formatting
END

